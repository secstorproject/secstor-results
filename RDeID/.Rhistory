library(tidyverse)
library(ggplot2)
library(pbapply)
library(dplyr)
library(readr)
# Carrega funções auxiliares do arquivo externo
source("helper_functions_deid.R")
# Setting the path to the data folders
data_path <- '../resultsdeid/'
# Lista de configurações
configurations <- c('c1-lib-i3-10100t', 'c2-lib-ryzen7-5700', 'c3-lib-xeon-e2378g',
't1-lan-sec', 't2-ext-sec', 't1-api-local', 't3-ext-amazon', 't4-ext-amazon-wifi')
# Campos de agrupamento para os conjuntos de dados
grouping_fields <- c('config', 'threads', 'ds', 'parpay', 'requests')
# Imprime o tempo de início
current_time <- Sys.time()
cat("Início: ", format(current_time, "%Y-%m-%d %H:%M:%OS3"), "\n\n")
# Importa os dados
full_ds <- dplyr::bind_rows(lapply(configurations, import_data))
# Remove outliers usando ZScore
full_zscore <- remove_outliers_zscore_grouped(full_ds, grouping_fields)
anon_api <- filter(full_summary_zscore, grepl("^t", config))
# Remove datasets não utilizados após esta etapa
rm(full_ds)
rm(full_zscore)
#########################LIB###############################################
# Para o conjunto de dados da biblioteca, obtenha uma visão geral do desempenho
anon_conf_perf_lib <- performance_overview_all_configs(anon_library)
library(tidyverse)
library(ggplot2)
library(pbapply)
library(dplyr)
library(readr)
# Carrega funções auxiliares do arquivo externo
source("helper_functions_deid.R")
# Setting the path to the data folders
data_path <- '../resultsdeid/'
# Lista de configurações
configurations <- c('c1-lib-i3-10100t', 'c2-lib-ryzen7-5700', 'c3-lib-xeon-e2378g',
't1-lan-sec', 't2-ext-sec', 't1-api-local', 't3-ext-amazon', 't4-ext-amazon-wifi')
# Campos de agrupamento para os conjuntos de dados
grouping_fields <- c('config', 'threads', 'ds', 'parpay', 'requests')
# Imprime o tempo de início
current_time <- Sys.time()
cat("Início: ", format(current_time, "%Y-%m-%d %H:%M:%OS3"), "\n\n")
# Importa os dados
full_ds <- dplyr::bind_rows(lapply(configurations, import_data))
# Remove outliers usando ZScore
full_zscore <- remove_outliers_zscore_grouped(full_ds, grouping_fields)
View(full_ds)
# Função para remover outliers usando o Z-Score
remove_outliers_zscore_grouped <- function(df, grouping_vars, z_threshold = 2) {
# Define uma função interna para calcular os z-scores de um vetor dado
# O z-score indica quantos desvios padrões um valor está em relação à média
calculate_zscore <- function(x) {
(x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
}
# Itera sobre cada coluna de instância (tempo de execução para diferentes instâncias)
for (instance_col in c("instance1", "instance2", "instance3", "instance4", "instance5")) {
# Para cada grupo (definido pelas variáveis de agrupamento), calcula os z-scores
z_scores <- df %>%
group_by(across(all_of(grouping_vars))) %>%
mutate(z_score = calculate_zscore(get(instance_col))) %>%
ungroup() %>%
pull(z_score)
# Filtra linhas onde o valor absoluto do z-score é menor ou igual ao limiar (z_threshold)
df <- df %>%
filter(abs(z_scores) <= z_threshold)
}
# Lista de colunas que devem ser convertidas para numérico
numeric_cols <- c("threads", "ds", "parpay")
# Verifica se a coluna "kused" está presente no dataframe
if ("kused" %in% colnames(df)) {
numeric_cols <- c(numeric_cols, "kused")
}
# Converte as colunas especificadas para numérico
df <- df %>%
mutate(across(all_of(numeric_cols), as.numeric))
# Retorna o dataframe após a remoção de outliers e conversão de colunas
return(df)
}
# Remove outliers usando ZScore
full_zscore <- remove_outliers_zscore_grouped(full_ds, grouping_fields)
# Resume os dados
full_summary_zscore <- summarize_times(full_zscore, grouping_fields)
# Separa configurações com base no caractere inicial dos dataframes fornecidos
anon_library <- filter(full_summary_zscore, grepl("^c", config))
anon_api <- filter(full_summary_zscore, grepl("^t", config))
# Remove datasets não utilizados após esta etapa
rm(full_ds)
rm(full_zscore)
#########################LIB###############################################
# Para o conjunto de dados da biblioteca, obtenha uma visão geral do desempenho
anon_conf_perf_lib <- performance_overview_all_configs(anon_library)
# Função para fornecer uma visão geral do desempenho para todas as configurações
performance_overview_all_configs <- function(df) {
# Função interna para extrair as linhas baseadas no desempenho (melhor, mediano ou pior)
extract_rows <- function(df, metric) {
if (metric == "best") {
idx <- df %>%
group_by(algorithm) %>%
slice(which.min(mean_time))
} else if (metric == "median") {
idx <- df %>%
group_by(algorithm) %>%
slice(which.min(abs(mean_time - median(mean_time))))
} else if (metric == "worst") {
idx <- df %>%
group_by(algorithm) %>%
slice(which.max(mean_time))
}
return(idx)
}
# Extração das linhas com base nos critérios
best_rows <- extract_rows(df, "best")
median_rows <- extract_rows(df, "median")
worst_rows <- extract_rows(df, "worst")
# Concatenando os resultados para criar um dataframe abrangente
performance_overview <- bind_rows(
mutate(best_rows, Performance = "Best"),
mutate(median_rows, Performance = "Median"),
mutate(worst_rows, Performance = "Worst")
) %>%
select(Performance, everything()) %>%  # Mova Performance para a primeira coluna
relocate(config, .after = algorithm) %>%  # Mova config para a terceira coluna
mutate(across(c(mean_time, sd_time, median_time), round, 2))  # Arredonde as colunas especificadas para 2 casas decimais
return(performance_overview)
}
#########################LIB###############################################
# Para o conjunto de dados da biblioteca, obtenha uma visão geral do desempenho
anon_conf_perf_lib <- performance_overview_all_configs(anon_library)
View(anon_api)
View(anon_api)
# Função para fornecer uma visão geral do desempenho para todas as configurações
performance_overview_all_configs <- function(df) {
# Função interna para extrair as linhas baseadas no desempenho (melhor, mediano ou pior)
extract_rows <- function(df, metric) {
if (metric == "best") {
idx <- df %>%
group_by(config) %>%
slice(which.min(mean_time))
} else if (metric == "median") {
idx <- df %>%
group_by(config) %>%
slice(which.min(abs(mean_time - median(mean_time))))
} else if (metric == "worst") {
idx <- df %>%
group_by(config) %>%
slice(which.max(mean_time))
}
return(idx)
}
# Extração das linhas com base nos critérios
best_rows <- extract_rows(df, "best")
median_rows <- extract_rows(df, "median")
worst_rows <- extract_rows(df, "worst")
# Concatenando os resultados para criar um dataframe abrangente
performance_overview <- bind_rows(
mutate(best_rows, Performance = "Best"),
mutate(median_rows, Performance = "Median"),
mutate(worst_rows, Performance = "Worst")
) %>%
select(Performance, everything()) %>%  # Mova Performance para a primeira coluna
relocate(config, .after = config) %>%  # Mova config para a terceira coluna
mutate(across(c(mean_time, sd_time, median_time), round, 2))  # Arredonde as colunas especificadas para 2 casas decimais
return(performance_overview)
}
#########################LIB###############################################
# Para o conjunto de dados da biblioteca, obtenha uma visão geral do desempenho
anon_conf_perf_lib <- performance_overview_all_configs(anon_library)
print(anon_conf_perf_lib)
View(anon_library)
# Função interna para extrair as linhas baseadas no desempenho (melhor, mediano ou pior)
extract_rows <- function(df, metric) {
if (metric == "best") {
idx <- df %>%
group_by(config) %>%
slice(which.min(mean_time))
} else if (metric == "median") {
idx <- df %>%
group_by(parpay) %>%
slice(which.min(abs(mean_time - median(mean_time))))
} else if (metric == "worst") {
idx <- df %>%
group_by(parpay) %>%
slice(which.max(mean_time))
}
return(idx)
}
#########################LIB###############################################
# Para o conjunto de dados da biblioteca, obtenha uma visão geral do desempenho
anon_conf_perf_lib <- performance_overview_all_configs(anon_library)
print(anon_conf_perf_lib)
# Calcula o desempenho médio para cada configuração do conjunto de dados da biblioteca
anon_conf_perf_sum_lib <- compute_config_performance(anon_library)
print(anon_conf_perf_sum_lib)
# Visão geral do desempenho para C3
anon_c3_perf_sum_api <- performance_overview_single_config(anon_library, "c3-lib-xeon-e2378g")
print(anon_c3_perf_sum_api)
#########################API###############################################
# Visão geral do desempenho
anon_conf_perf_api <- performance_overview_all_configs(anon_api)
print(anon_conf_perf_api)
# Desempenho médio para cada configuração do conjunto de dados da API
anon_conf_perf_sum_api <- compute_config_performance(anon_api)
print(anon_conf_perf_sum_api)
# Desempenho do cenário onde o serviço está no IFSC e a conexão é externa
anon_t2_perf_sum_api <- performance_overview_single_config(anon_api, "t2-ext-sec")
print(anon_t2_perf_sum_api)
generate_line_plots(anon_library)
#Gera gráfico com todas as configurações
generate_line_plots(anon_library)
generate_api_line_plots(anon_api)
source("C:/Users/Luciano/Insync/luciano.barreto@ifsc.edu.br/Google Drive/Ensino/Projeto de Pesquisa_Extensão/Fapesc 2021/Análises/RDeID/Main_RDeID.R")
